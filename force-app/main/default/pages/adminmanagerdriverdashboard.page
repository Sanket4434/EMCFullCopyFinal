<apex:page showHeader="false" title="Driver Details" sidebar="false" controller="AdminManagerDriverDashboardController" action="{!getRedirected}">
    <html lang="en">

    <head>
        <apex:include pageName="EMC_Common_Head" />
        <apex:include pageName="EMC_Common_Scripts" />
        <script src="{!URLFOR($Resource.modelJs)}"></script>
        <script src="{!URLFOR($Resource.dirPagination)}"></script>
        <style type="text/css">
            .modal-backdrop.fade {
                opacity: 0.7 !important;
            }

            .fade:not(.show) {
                opacity: 1;
            }

            #modalbackdrop {
                /*opacity: 0.7 !important;*/
                z-index: 1050 !important;
            }

            .check-in-info {
                margin-top: 9px;
            }

            .modal-dialog {
                z-index: 1057;
            }

            .syncMileageBtn {
                font-size: 12px !important;
                padding: 2px 8px !important;
            }

            .pad-0 {
                padding-top: 0rem;
            }

            .vw-8 {
                width: 8vw;
            }

            .vw-7 {
                width: 7vw;
            }

            .vw-9 {
                width: 9vw;
            }

            .vw-4 {
                width: 4vw !important;
            }

            .font-14 {
                font-size: 14px !important;
            }
            .cursor-type {
                cursor: pointer;
            }

            .vw-6{
                width: 6vw;
            }
            /*table#driver-dashbord-month-model span.sort-icon 
                {
                    margin-top: 7px;
                    vertical-align: middle;
                    font-size: 12px;
                    right: 0;
                }*/

            .pagination {
                display: inline-block;
                padding-left: 0;
                margin: 20px 0;
                border-radius: 4px;
            }

            .pagination>li {
                display: inline;
            }

            .pagination>li>a,
            .pagination>li>span {
                position: relative;
                float: left;
                padding: 6px 12px;
                margin-left: -1px;
                line-height: 1.42857143;
                color: #78bc42;
                text-decoration: none;
                background-color: #fff;
                border: 1px solid #ddd;
            }

            .pagination>li:first-child>a,
            .pagination>li:first-child>span {
                margin-left: 0;
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #777;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #78bc42;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.active>a,
            .pagination>.active>a:focus,
            .pagination>.active>a:hover,
            .pagination>.active>span,
            .pagination>.active>span:focus,
            .pagination>.active>span:hover {
                z-index: 3;
                color: #fff;
                cursor: default;
                background-color: #78bc42;
                border-color: #78bc42;
            }

            table#driver-dashbord-month-model span.sort-icon {
                font-size: 12px;
                vertical-align: middle;
                margin-top: 7px;
            }

            .rt {
                margin-top: -2rem!important;
            }

            table.dataTable thead th,
                {
                padding: 10px 7px!important;
            }

            .disable-pagination {
                pointer-events: none;
            }

            .paginationformodal {
                margin: 0px 0 !important;
            }

            .paginationformodaldownloadbutton {
                margin-top: 0px;
            }

            .piginationpages {
                color: #78bc42 !important;
            }

            .paginationformodal>a {
                color: #78bc42 !important;
            }

            .spinner-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.4;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .spinner-load {
                position: fixed;
                top: 49%;
                left: 49%;
                z-index: 1000000;
            }

            .left-style {
                left: 25% !important;
            }

            .sMessage-load {
                font-size: 20px;
                position: fixed;
                top: 60%;
                left: 41%;
                z-index: 1000000;
            }

            .w-10rem {
                width: 7rem;
            }

            .margin_top-5 {
                margin-top: 5px;
            }

            .rowforplan {
                margin-right: -15px;
                margin-left: -15px;
            }

            table.dataTable tbody td {
                padding: 5px 8px !important;
            }

            table.dataTable tfoot th,
            table.dataTable tfoot td {
                padding: 10px 18px 6px 6px;
            }

            /*AI-000206 - Start*/

            #example_filter {
                position: absolute;
                right: 0px;
                top: 0px;
            }

            #filtericon {
                padding: 10px;
                right: 0;
                position: absolute;
                display: block;
                z-index: 4;
                cursor: pointer;
            }

            .w-85 {
                width: 89% !important;
            }

            .pull-right1 {
                float: right !important;
            }

            .mr-11 {
                margin-right: 12px !important;
            }

            .table-nodata {
                text-align: center;
            }

            /*AI-000206 - Ends*/
        </style>
        <script>
            var app = angular.module('managerDashboardModule', ['ui.bootstrap', 'angularUtils.directives.dirPagination']);

            var MileagesofReimbursements = function (visible) {
                this.visible = visible;
            };

            MileagesofReimbursements.prototype.open = function (name, fileName, month, mileageList, emailofemployee) {
                this.fileName = fileName;
                this.visible = true;
                this.mileageList = mileageList;
                this.name = name;
                this.clickedMonth = month;
                this.emailofemployee = emailofemployee;
            };

            MileagesofReimbursements.prototype.close = function () {
                this.visible = false;
            };

            app.directive('reimbursementsDialogDirective', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '=',
                            data: "&exportData",
                            someCtrlFn: '&callbackFn',
                            modalformsg: '&modalOpen'
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                                if (newValue == true) {
                                    scope.callfn('');
                                }
                                else {
                                    scope.IsAllChecked = false;
                                    scope.IsAllCheckedFlag = false;
                                    scope.checkAllShowApprove = false;
                                    scope.checkAllShowFlag = false;
                                }
                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        scope.selectedmonth = scope.model.clickedMonth;
                                        scope.selectedyear = scope.model.clickedYear;
                                        scope.selecteddid = item.driverid;
                                    }
                                });
                            });

                            scope.totalMileage = 0;
                            scope.totalVariableAmount = 0;
                            scope.showmanagermodalsearchbar = false;
                            scope.selecteddid = '';
                            scope.displayBtn = false;
                            scope.IsAllChecked = false;
                            scope.IsAllCheckedFlag = false;
                            scope.checkAllShowApprove = false;
                            scope.checkAllShowFlag = false;
                            scope.selectedmileageidlist = [];
                            scope.selectedrejectedmileageidlist = [];
                            scope.selectednotapprovemileageidlist = [];
                            scope.showData = [];
                            scope.total = 0;
                            scope.totalvariablerate = 0;
                            scope.currentPage = 1;
                            scope.lastIndex = 0;
                            scope.totalRecords;
                            scope.reverse = false;
                            scope.maxPage = 0;
                            scope.search = "";
                            scope.itemPerPage = 8;
                            scope.searchedArray = [];
                            scope.init = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.IsAllEnable = false;
                                scope.totalvariablerate = 0;
                                scope.maxPage = 0;
                                scope.totalRecords = scope.model.mileageList.length;
                                scope.model.mileageList
                                let tl = 0;
                                let tv = 0;
                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                scope.totalRecords
                                for (var i = 0; i < scope.itemPerPage; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseInt(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseInt(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }

                            scope.next = function () {

                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                var count = 0;
                                let lockdatecount = 0;
                                let tl = 0;
                                let tv = 0;

                                for (var i = scope.lastIndex; i < lstInd + scope.itemPerPage; i++) {
                                    let isSearch = scope.searchedArray.length > 0 ? true : false
                                    if (isSearch) {
                                        if (scope.searchedArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                            tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                            scope.showData.push(scope.searchedArray[i])
                                        }
                                    } else {
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    // scope.sort("tripdate");
                                    scope.lastIndex = i + 1;
                                }

                                //AI-000427 --> Starts

                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });

                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                        scope.displayBtn = true;
                                    }
                                }
                                else {
                                    scope.displayBtn = false;
                                }

                                //AI-000427 --> Ends
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage++;
                            }
                            scope.previous = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                let tl = 0;
                                let tv = 0;
                                let lockdatecount = 0;
                                var lstInd = scope.lastIndex;
                                var count = 0;
                                for (var i = scope.lastIndex - (scope.itemPerPage * 2); i < lstInd - scope.itemPerPage; i++) {
                                    let isSearch = scope.searchedArray.length > 0 ? true : false
                                    if (isSearch) {
                                        if (scope.searchedArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                            tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                            scope.showData.push(scope.searchedArray[i])
                                        }
                                    } else {
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    //  scope.sort("tripdate");
                                    scope.lastIndex = i + 1;
                                }

                                //AI-000427 --> Starts

                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });
                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                        scope.displayBtn = true;
                                    }
                                }
                                else {
                                    scope.displayBtn = false;
                                }

                                //AI-000427 --> Ends
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage--;
                            }
                            scope.sortKey = 'tripdate';
                            scope.sort = function (keyName) {
                                //$scope.reverse = !$scope.reverse;
                                scope.reverse = (scope.sortKey === keyName) ? !scope.reverse : false;
                                scope.sortKey = keyName;

                                if (keyName === 'mileage' || keyName === 'variableamount') {

                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = parseInt(a[keyName]),
                                            nameB = parseInt(b[keyName]);

                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return valuscope.model.mileageList=e (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                if (keyName === 'origin' || keyName === 'destination') {
                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = a[keyName].toLowerCase(),
                                            nameB = b[keyName].toLowerCase()
                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                if (keyName === 'tripdate' || keyName === 'submitteddate') {
                                    scope.model.mileageList.sort(function (a, b) {
                                        var dateA = new Date(a[keyName].toLowerCase()),
                                            dateB = new Date(b[keyName].toLowerCase())
                                        if (scope.reverse) {
                                            if (dateA < dateB) //sort string ascending
                                                return -1
                                            if (dateA > dateB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (dateA < dateB) //sort string ascending
                                                return 1
                                            if (dateA > dateB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }

                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                let tl = 0;
                                let tv = 0;
                                for (var i = scope.lastIndex - scope.itemPerPage; i < lstInd; i++) {

                                    if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseInt(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseInt(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }

                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }

                            scope.callfn = function (flagstatus) {
                                scope.init();
                                scope.totalMileage = 0;
                                scope.totalVariableAmount = 0;
                                scope.model.mileageList

                                let approvedcount = 0, flagcount = 0, approvedchkcount = 0, lockdatecount = 0;
                                let countapprovemil = 0;
                                if (scope.model.mileageList.length == 0) {
                                    scope.checkAllShowApprove = false;
                                    scope.checkAllShowFlag = false;
                                    scope.displayBtn = false;
                                    scope.displayDownloadBtn = false;
                                }

                                if (scope.showData.length > 0) {
                                    if (scope.model.mileageList.length > 8)
                                        scope.showmanagermodalsearchbar = true;
                                    else
                                        scope.showmanagermodalsearchbar = false;

                                    scope.displayDownloadBtn = true;
                                    scope.totalMileage = 0;
                                    scope.totalVariableAmount = 0;
                                    let tv = 0;
                                    let tm = 0;
                                    angular.forEach(scope.model.mileageList, function (item) {
                                        /*scope.totalMileage = scope.totalMileage + parseInt(item.mileage);
                                        scope.totalVariableAmount = scope.totalVariableAmount + parseInt(item.variableamount);*/
                                        if (item.isLockDate === true) {
                                            lockdatecount++;
                                        }
                                        tv = tv + parseFloat(item.variableamount);
                                        scope.totalVariableAmount = tv.toFixed(2);

                                        tm = tm + parseFloat(item.mileage);
                                        scope.totalMileage = tm.toFixed(2);

                                        if ((item.status != 'None' && item.status != '') && item.mileage > 0) {
                                            approvedchkcount++;
                                            scope.checkAllShowApprove = true;
                                            scope.checkAllShowFlag = true;

                                            if (item.isSelected) {
                                                approvedcount++;
                                            } else if (item.isChecked) {
                                                flagcount++;
                                            }
                                        }
                                        if (item.status == 'Approved') {
                                            countapprovemil++;
                                        }
                                    });

                                    if ((scope.model.mileageList.length - countapprovemil) > 0) {

                                        scope.checkAllShowApprove = true;
                                    }
                                    else if ((scope.model.mileageList.length - countapprovemil) == 0) {

                                        scope.checkAllShowApprove = false;
                                    }

                                    if (approvedchkcount == 0 && approvedcount == 0) {
                                        scope.checkAllShowApprove = false;
                                    }
                                    else {
                                        if (approvedchkcount == approvedcount) {
                                            scope.IsAllChecked = true;
                                            scope.IsAllCheckedFlag = false;
                                        }

                                    }

                                    if (approvedchkcount == 0 && flagcount == 0) {
                                        scope.checkAllShowFlag = false;
                                    }
                                    else {
                                        if (approvedchkcount == flagcount) {
                                            scope.IsAllCheckedFlag = true;
                                            scope.IsAllChecked = false;
                                        }
                                    }
                                    if (lockdatecount == 0) {
                                        scope.IsAllEnable = false;
                                        scope.checkAllShowApprove = true;
                                        scope.checkAllShowFlag = true;
                                        if (approvedcount != 0 || flagcount != 0) {
                                            scope.displayBtn = true;
                                        }
                                        else {
                                            scope.displayBtn = false;
                                        }
                                    }
                                    else {
                                        scope.displayBtn = false;
                                        scope.IsAllEnable = true;
                                        scope.checkAllShowApprove = true;
                                        scope.checkAllShowFlag = true;
                                    }
                                }
                                var checktrues = $filter("filter")(scope.model.mileageList, { isChecked: true });
                                var selectedtrues = $filter("filter")(scope.model.mileageList, { isChecked: true });
                                if (checktrues.length > 0 || selectedtrues.lenght > 0)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;
                                if (flagstatus != '') {
                                    scope.modalformsg({ status: flagstatus });
                                }

                            }

                            scope.CheckUncheckAll = function () {
                                if (scope.IsAllChecked == true)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;

                                scope.countMileag = 0;
                                scope.showData = [];
                                scope.selectedmileageidlist = [];
                                angular.forEach(scope.model.mileageList, function (item) {
                                    item.isSelected = scope.IsAllChecked;
                                    scope.countMileag = scope.countMileag + parseInt(item.mileage);
                                    scope.selectedmileageidlist.push(item.id);
                                    if (item.isChecked) {
                                        item.isChecked = !item.isChecked;
                                        if (scope.IsAllCheckedFlag) {
                                            scope.IsAllCheckedFlag = false;
                                        }
                                    }
                                });
                                for (var i = 0; i < scope.itemPerPage; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }
                            };

                            scope.CheckUncheckHeader = function () {
                                scope.selectedmonth = '';
                                scope.selecteddid = '';
                                scope.selectedyear = '';
                                scope.selectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                scope.countMileag = 0;
                                //var total = $('.myteamcheck').length;
                                var total = scope.model.mileageList.length;
                                var count = 0;
                                var perpagecount = 0;
                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isSelected) {
                                        count++;
                                    }
                                });
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected) {

                                        perpagecount++;
                                        scope.countMileag = scope.countMileag + parseInt(item.mileage);
                                        scope.selectedmileageidlist.push(item.id);
                                        scope.selectedmonth = scope.model.clickedMonth;
                                        scope.selectedyear = scope.model.clickedYear;
                                        scope.selecteddid = item.driverid;
                                        if (item.isChecked) {
                                            item.isChecked = !item.isChecked;
                                        }
                                    }
                                    if(item.isUnapprove){
                                        scope.selectednotapprovemileageidlist.push(item.id);
                                    }
                                });
                                if (total == count && (total != 0 && count != 0)) {
                                    // scope.model.mileageList = scope.showData
                                    scope.IsAllChecked = true;
                                    scope.IsAllCheckedFlag = false;
                                }
                                else {
                                    scope.IsAllChecked = false;
                                    scope.IsAllCheckedFlag = false;
                                }
                                var trues = $filter("filter")(scope.showData, { isChecked: true });
                                scope.chkselectcount = trues.length;
                                if (count == 0 && scope.chkselectcount == 0)
                                    scope.displayBtn = false;
                                else
                                    scope.displayBtn = true;
                            };

                            scope.CheckUncheckAllForFlag = function () {
                                scope.selectedrejectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                scope.showData = [];
                                if (scope.IsAllCheckedFlag == true)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;

                                angular.forEach(scope.model.mileageList, function (item) {
                                    item.isChecked = scope.IsAllCheckedFlag;
                                    scope.selectedrejectedmileageidlist.push(item.id);
                                    if (item.isSelected) {
                                        item.isSelected = !item.isSelected;
                                        if (scope.IsAllChecked) {
                                            scope.IsAllChecked = false;
                                        }
                                    }
                                });
                                for (var i = 0; i < scope.itemPerPage; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }
                            };

                            scope.CheckUncheckHeaderForFlag = function (index) {
                                scope.selectedmonth = '';
                                scope.selecteddid = '';
                                scope.selectedyear = '';
                                scope.selectedrejectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                //var total = $('.flagcheck').length;
                                var total = scope.model.mileageList.length;
                                var count = 0;
                                var perpagecount = 0;
                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isChecked) {
                                        count++;
                                    }
                                });
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isChecked) {
                                        perpagecount++;
                                        scope.selectedrejectedmileageidlist.push(item.mileage);
                                        scope.selectedmonth = scope.model.clickedMonth;
                                        scope.selectedyear = scope.model.clickedYear;
                                        scope.selecteddid = item.driverid;
                                        if (item.isSelected) {
                                            item.isSelected = !item.isSelected;
                                        }
                                    }
                                    if(item.isUnapprove){
                                        perpagecount++;
                                        scope.selectednotapprovemileageidlist.push(item.mileage);
                                    }
                                });
                                if (total == count && (total != 0 && count != 0)) {
                                    //  scope.model.mileageList = scope.showData
                                    scope.IsAllCheckedFlag = true;
                                    scope.IsAllChecked = false;
                                }
                                else {
                                    scope.IsAllCheckedFlag = false;
                                    scope.IsAllChecked = false;
                                }

                                var trues = $filter("filter")(scope.showData, { isSelected: true });
                                scope.chkselectcount = trues.length;

                                if (count == 0 && scope.chkselectcount == 0)
                                    scope.displayBtn = false;
                                else
                                    scope.displayBtn = true;
                            };
                            scope.refreshpage = function (mileages) {
                                scope.someCtrlFn({ updatedmileagelist: mileages });
                            }

                            scope.updatePagination = function () {
                                if (scope.search.length > 0) {
                                    scope.itemPerPage = 8;

                                    var filteredArray = scope.model.mileageList.filter(function (number) {
                                        if (number.origin != '' && number.origin != null && number.origin != undefined && number.destination != '' && number.destination != null && number.destination != undefined) {

                                            return number.origin.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1 || number.destination.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1;
                                        }
                                        return number.origin, number.destination;
                                    });

                                    scope.searchedArray = filteredArray;
                                    scope.showData = [];
                                    scope.total = 0.0;
                                    scope.totalvariablerate = 0.0;
                                    scope.maxPage = 0;
                                    scope.totalRecords = filteredArray.length;

                                    let tl = 0;
                                    let tv = 0;
                                    scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                    scope.totalRecords
                                    for (var i = 0; i < scope.itemPerPage; i++) {
                                        scope.currentPage = 1;
                                        if (filteredArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                            tl = tl + parseFloat(filteredArray[i].mileage);
                                            tv = tv + parseFloat(filteredArray[i].variableamount);
                                            /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            scope.showData.push(filteredArray[i])
                                        }
                                        scope.lastIndex = i + 1;
                                    }
                                    if (scope.showData.length == 0) {
                                        scope.displayDownloadBtn = false;
                                    }
                                    else {
                                        scope.displayDownloadBtn = true;
                                    }
                                    scope.total = tl.toFixed(2);
                                    scope.totalvariablerate = tv.toFixed(2);


                                } else {
                                    scope.itemPerPage = 8;
                                    scope.init();
                                    scope.searchedArray.length = 0;
                                    scope.displayDownloadBtn = true;
                                }


                            }
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                    //  scope.sort("tripdate");
                                });
                            });
                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    // scope.sort("tripdate");
                                    scope.model.visible = false;
                                    scope.search = "";
                                    scope.searchedArray.length = 0;
                                });
                            });

                            $('input[type=search]').on('search', function () {
                                scope.search = "";
                                scope.searchedArray.length = 0;
                            });

                            scope.onClick = function () {
                                $('#spinner').show();
                                scope.updateformileagelist = [];

                                var arr = [];
                                if (scope.IsAllChecked || scope.IsAllCheckedFlag) {
                                    arr = scope.model.mileageList;
                                } else {
                                    arr = scope.showData;
                                }

                                angular.forEach(arr, function (item) {
                                    if (item.isChecked == true || item.isSelected == true) {
                                        item.isUnapprove = false;
                                        scope.updateformileagelist.push(item);
                                    }
                                    if(item.isChecked == false && item.isSelected == false) {
                                        item.isUnapprove = true;
                                        scope.updateformileagelist.push(item);
                                    }
                                });
                                var truecheck = $filter("filter")(arr, { isChecked: true });
                                scope.chkcount = truecheck.length;
                                console.log('truecheck:-' + scope.chkcount);
                                var trueselect = $filter("filter")(arr, { isSelected: true });
                                scope.selectcount = trueselect.length;
                                var trueunapprove = $filter("filter")(arr, { isUnapprove: true });
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminManagerDriverDashboardController.approveMileages}', JSON.stringify(truecheck), JSON.stringify(trueselect), JSON.stringify(trueunapprove), scope.model.name, scope.model.emailofemployee,
                                    function (result, event) {
                                        if (event.status && result == 'success') {
                                            /*let resultArray = result;
                                            
                                            scope.model.mileageList = JSON.parse(resultArray);
                                            */
                                            var tempArray = JSON.parse(JSON.stringify(scope.model.mileageList));
                                            tempArray.forEach(function (item) {

                                                scope.updateformileagelist.forEach(function (ui) {
                                                    if (item.id == ui.id) {

                                                        if ((item.isChecked != ui.isChecked) || ui.isChecked == true) {
                                                            if (ui.isChecked) {
                                                                item.status = 'Rejected'
                                                                item.approveddate = '';
                                                                item.isChecked = true;
                                                                item.isSelected = false;
                                                            }
                                                        }
                                                        if ((item.isSelected != ui.isSelected) || (item.isSelected == true && ui.isSelected == true)) {
                                                            if (ui.isSelected) {

                                                                item.isChecked = false;
                                                                item.isSelected = true;
                                                                item.status = 'Approved'
                                                                var dt = $filter('date')(new Date(), "MM/dd/yy");
                                                                item.approveddate = dt;
                                                            }
                                                        }
                                                        if(ui.isUnapprove == true){
                                                            // console.log("Is not approve")
                                                                item.isChecked = false;
                                                                item.isSelected = false;
                                                                item.status = 'Not Approved Yet' 
                                                        }
                                                    }
                                                })
                                            })

                                            scope.model.mileageList = JSON.parse(JSON.stringify(tempArray));
                                            if (scope.selectedmileageidlist.length == 0 && scope.selectedrejectedmileageidlist.length == 0 && scope.selectednotapprovemileageidlist.length == 0) {

                                                $('#spinner').hide();
                                                toastr.success('This Mileage has already flagged.');
                                            }
                                            var flagstatus = '';
                                            if (scope.selectcount > 0 && scope.selectedmileageidlist.length > 0) {
                                                flagstatus = flagstatus + 'Approved';
                                                scope.refreshpage(scope.model.mileageList);
                                                scope.selectedmileageidlist = [];
                                            }
                                            if (scope.chkcount > 0 && scope.selectedrejectedmileageidlist.length > 0) {
                                                flagstatus = flagstatus + 'Rejected';
                                                scope.refreshpage(scope.model.mileageList);
                                                scope.selectedrejectedmileageidlist = [];
                                            }
                                            scope.callfn(flagstatus);
                                        }
                                        else {
                                            $('#spinner').hide();
                                            toastr.error('Something went wrong');
                                        }
                                        scope.$apply();
                                    });

                            };
                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog"aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="modal-dialog modal-xl modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><h4 ng-model="month">{{model.clickedMonth}}</h4><div class="modal-divider"></div><div class="table-responsive"><div id="example_filter" class="dataTables_filter pull-right d-block" ng-show="showmanagermodalsearchbar"><div class="input-group w-85" ><i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i><input class="form-control py-2 border-right-0 border" type="search" ng-model="search" ng-change="updatePagination()" placeholder="Search..." aria-controls="example" id="example-search-input" /></div></div><table id="driver-dashbord-month-model" class="table table-striped dt-responsive nowrap no-footer dataTable" cellspacing="0" width="100%"><thead><tr><th ng-click="sort(\'tripdate\')">Trip Date<span ng-show="sortKey == \'tripdate\'" class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}"></span></th><th ng-click="sort(\'origin\')">Origin<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'origin\'"></span></th><th ng-click="sort(\'destination\')">Dest.<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'destination\'"></span></th><th ng-click="sort(\'submitteddate\')">Submitted<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'submitteddate\'"></span></th><th ng-click="sort(\'approveddate\')">Approved<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'approveddate\'"></span></th><th ng-click="sort(\'mileage\')">Mileage<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'mileage\'"></span></th><th ng-click="sort(\'variableamount\')">Variable Amount<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'variableamount\'"></span></th><th><button class="btn btn-primary pull-right1">Approve <input type="checkbox" ng-click="CheckUncheckAll()" ng-model="IsAllChecked" ng-show="checkAllShowApprove" ng-disabled="IsAllEnable"/></button></th><th><button class="btn btn-third pull-right1">Flag </span><input type="checkbox" ng-show="checkAllShowFlag" ng-disabled="IsAllEnable" ng-click="CheckUncheckAllForFlag()" ng-model="IsAllCheckedFlag"></button></th></tr></thead><tbody class="table-a-link"><tr ng-repeat="mil in showData |filter:search" current-page:"currentPage"><td ng-model="mil.tripdate">{{ mil.tripdate}}</td><td ng-model="mil.origin">{{ mil.origin}}</td><td ng-model="mil.destination">{{ mil.destination }}</td><td ng-model="mil.submitteddate">{{ mil.submitteddate }}</td><td ng-model="mil.approveddate">{{mil.approveddate }}</td><td ng-model="mil.mileage">{{ mil.mileage }}</td><td ng-model="mil.variableamount" id="modalvariableid">${{ mil.variableamount }}</td><td ng-model="mil.status"><div ng-model="mil.status" ng-if="mil.status !=\'Approved\' && mil.mileage > \'0\'"></div><div class="pull-right1 mr-11" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isSelected" class="myteamcheck" ng-click="CheckUncheckHeader();" ng-disabled="mil.isLockDate"></div></td><td ng-model="mil.status"><div ng-model="mil.status" ng-if="mil.mileage > \'0\'"></div><div class="pull-right1 mr-11" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isChecked"  class="flagcheck" ng-click="CheckUncheckHeaderForFlag();" ng-disabled="mil.isLockDate"></div></td></tr><tr ng-if="showData.length == 0"><td colspan="9" class="table-nodata">No Records Available</td></tr></tbody><tfoot ng-if="displayDownloadBtn"><tr><th scope="row">Total</th><th colspan="4"> </th><th>{{total | number:2 }} / {{totalMileage | number:2 }}</th><th>${{totalvariablerate}} / ${{totalVariableAmount}}</th><th colspan="2"></th></tr></tfoot></table></div></div><div class="modal-footer"><div class="col-md-6" ng-if="displayDownloadBtn">Page {{currentPage}} of {{maxPage}}</div><div class="col-md-6"><ul ng-if="displayDownloadBtn" class="pagination float-right paginationformodal"><li class="page-item " ng-class="{\'disable-pagination\':currentPage === 1}"><a class="page-link" ng-click="previous()">Previous</a></li><li class="page-item"><a class="page-link" >{{currentPage}}</a></li><li class="page-item" ng-class="{\'disable-pagination\':currentPage === maxPage}"><a class="page-link" ng-click="next()">Next</a></li></ul><div class="paginationformodaldownloadbutton"><div excel-export="true" export-data="data()" ng-show="displayDownloadBtn" file-name="{{model.fileName}}"/><button class="btn btn-secondary float-right" ng-click="onClick();" ng-show="displayBtn">Submit</button></div></div></div></div></div></div>'
                    };
                }
            ]);

            app.directive('excelExport', function () {
                return {
                    restrict: 'A',
                    scope: {
                        fileName: "@",
                        data: "&exportData"
                    },
                    replace: true,
                    template: '<button class="btn btn-primary float-right mr-11" ng-click="download()">Download <i class="fa fa-download"></i></button>',
                    link: function (scope, element) {

                        scope.download = function () {

                            function datenum(v, date1904) {
                                if (date1904) v += 1462;
                                var epoch = Date.parse(v);
                                return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                            };

                            function getSheet(data, opts) {
                                var ws = {};
                                var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
                                for (var R = 0; R != data.length; ++R) {
                                    for (var C = 0; C != data[R].length; ++C) {
                                        if (range.s.r > R) range.s.r = R;
                                        if (range.s.c > C) range.s.c = C;
                                        if (range.e.r < R) range.e.r = R;
                                        if (range.e.c < C) range.e.c = C;
                                        var cell = { v: data[R][C] };
                                        if (cell.v == null) continue;
                                        var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });

                                        if (typeof cell.v === 'number') cell.t = 'n';
                                        else if (typeof cell.v === 'boolean') cell.t = 'b';
                                        else if (cell.v instanceof Date) {
                                            cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                            cell.v = datenum(cell.v);
                                        }
                                        else cell.t = 's';

                                        ws[cell_ref] = cell;
                                    }
                                }
                                if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                return ws;
                            };

                            function Workbook() {
                                if (!(this instanceof Workbook)) return new Workbook();
                                this.SheetNames = [];
                                this.Sheets = {};
                            }

                            var wb = new Workbook(), ws = getSheet(scope.data());
                            /* add worksheet to workbook */
                            wb.SheetNames.push(scope.fileName);
                            wb.Sheets[scope.fileName] = ws;
                            var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });

                            function s2ab(s) {
                                var buf = new ArrayBuffer(s.length);
                                var view = new Uint8Array(buf);
                                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                return buf;
                            }

                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), scope.fileName + '.xlsx');

                        };
                    }
                };
            });

            app.controller('managerDashboardController', ['$scope', '$filter', '$modal',
                function ($scope, $filter, $modal) {
                    var url_string = $(location).attr("href");
                    var url = new URL(url_string);
                    $scope.manid = url.searchParams.get("manid");
                    $scope.accid = url.searchParams.get("accid");
                    $scope.id = url.searchParams.get("id");
                    $scope.adminid = url.searchParams.get("adminid");
                    $scope.showteam = url.searchParams.get("showteam");
                    $scope.syncMileageLabel = '{!($Label.unapproveMileageMessage)}';
                    $scope.approvalTopMsg = '{!($Label.mileageApprovalTopMsg)}';
                    $scope.approvalBottomMsg = '{!($Label.mileageApprovalBottomMsg)}';
                    $scope.WeiserAccID = '{!($Label.Weiser_Account)}';
                    $scope.ERMIAcc = '{!($Label.ERMI_Account)}';
                    $scope.driverType = "";
                    $scope.years = {!Last2Years
                };
            $scope.syncHeader = false;
            $('#processSpinner').hide();
            $scope.years.sort(function (a, b) {
                var numA = parseInt(a),
                    numB = parseInt(b);

                if (numA < numB) {
                    return 1;
                } else if (numA > numB) {
                    return -1;
                } else {
                    return 0; //default return value (no sorting)
                }
            })

            $scope.lastYear = _.first($scope.years);
            var daymonth = new Array();
            daymonth[0] = "January";
            daymonth[1] = "February";
            daymonth[2] = "March";
            daymonth[3] = "April";
            daymonth[4] = "May";
            daymonth[5] = "June";
            daymonth[6] = "July";
            daymonth[7] = "August";
            daymonth[8] = "September";
            daymonth[9] = "October";
            daymonth[10] = "November";
            daymonth[11] = "December";


            let currDate = new Date();
            let compareDate = currDate.getDate();
            $scope.syncMonth = (compareDate >= 18) ? (daymonth[currDate.getMonth()]) : (daymonth[currDate.getMonth() - 1]);
            $scope.search = "";
            $scope.emailofemployee = '{!emailofEmployee}';

            $scope.reimbursementDialog = new MileagesofReimbursements(false);
            $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
            $scope.IsAllChecked = false;
            $scope.displayTeamRecordBtn = false;
            $('#spinner').hide();
            $scope.tabs = [{ active: true }, { active: false }, { active: false }, { active: false }];
            $scope.packetandMeeting = function () {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getPacketandMeeting}', $scope.id,
                    function (result, event) {
                        if (event.status && result != null && result != '') {
                            $scope.pacektstatus = [];
                            $scope.pacektstatus = JSON.parse(result);
                            $scope.pacekt = $scope.pacektstatus[0].Packet__c;
                            $scope.meeting = $scope.pacektstatus[0].Meeting__c;
                            if ($scope.pacekt == 'Being Generated') {
                                document.getElementById("downloadbtn").style.visibility = "hidden";
                                angular.element(document.querySelector("#beinggenratedsignature")).addClass(" active");
                                angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                angular.element(document.querySelector("#completesignature")).removeClass("active");
                                angular.element(document.querySelector("#beinggenratedsignature")).addClass("btn.btn-secondary.pull-right");
                            }
                            else if ($scope.pacekt == 'Sent for Signature') {
                                document.getElementById("downloadbtn").style.visibility = "hidden";
                                angular.element(document.querySelector("#beinggenratedsignature")).removeClass(" active");
                                angular.element(document.querySelector("#sentforsignature")).addClass("active");
                                angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                angular.element(document.querySelector("#completesignature")).removeClass("active");
                                angular.element(document.querySelector("#sentforsignature")).addClass("btn.btn-secondary.pull-right");

                            }
                            else if ($scope.pacekt == 'Waiting for Signature') {
                                document.getElementById("downloadbtn").style.visibility = "hidden";
                                angular.element(document.querySelector("#beinggenratedsignature")).removeClass(" active");
                                angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                angular.element(document.querySelector("#waitingforsignature")).addClass(" active");
                                angular.element(document.querySelector("#completesignature")).removeClass("active");

                            }
                            else if ($scope.pacekt == 'Complete') {
                                angular.element(document.querySelector("#beinggenratedsignature")).removeClass("active");
                                angular.element(document.querySelector("#sentforsignature")).removeClass("active");
                                angular.element(document.querySelector("#waitingforsignature")).removeClass("active");
                                angular.element(document.querySelector("#completesignature")).addClass("active");
                                angular.element(document.querySelector("#completesignature")).removeClass("btn-secondary");
                            }
                            else {
                                angular.element(document.querySelector("#beinggenratedsignature")).addClass("blank-stepper");
                                angular.element(document.querySelector("#sentforsignature")).addClass("blank-stepper");
                                angular.element(document.querySelector("#waitingforsignature")).addClass("blank-stepper");
                                angular.element(document.querySelector("#completesignature")).addClass("blank-stepper");
                            }

                            if ($scope.meeting == 'Scheduled') {
                                angular.element(document.querySelector("#scheduledsignature")).addClass(" active");
                                angular.element(document.querySelector("#sentsignature")).removeClass("active");
                                angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");
                                angular.element(document.querySelector("#didnotattendsignature")).removeClass("active");
                                angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                            }
                            else if ($scope.meeting == 'Sent') {
                                angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                angular.element(document.querySelector("#sentsignature")).addClass(" active");
                                angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");
                                angular.element(document.querySelector("#didnotattendsignature")).removeClass("active");
                                angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                            }
                            else if ($scope.meeting == 'Attended') {
                                angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                angular.element(document.querySelector("#sentsignature")).removeClass("active");
                                angular.element(document.querySelector("#completedsignature")).addClass(" active");
                                angular.element(document.querySelector("#completedsignature")).addClass("completed"); //mobio
                                angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend-blank"); //mobio
                                angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend"); //mobio : make span colored green
                            }
                            else if ($scope.meeting == 'Did Not Attend') {
                                angular.element(document.querySelector("#scheduledsignature")).removeClass("active");
                                angular.element(document.querySelector("#scheduledsignature")).addClass("schedule");
                                angular.element(document.querySelector("#completedsignature")).addClass("completed-blank");//mobio:to hide Completed div
                                angular.element(document.querySelector("#span-didnotattend")).addClass("span-did-not-attend");//mobio:to color specific span red
                                angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend");//mobio:to make "Did Not Attended" colored red
                            } else {
                                angular.element(document.querySelector("#scheduledsignature")).addClass("blank-stepper");
                                angular.element(document.querySelector("#sentsignature")).addClass("blank-stepper");
                                angular.element(document.querySelector("#completedsignature")).addClass("blank-stepper");
                                angular.element(document.querySelector("#completedsignature")).addClass("completed");
                                angular.element(document.querySelector("#span-didnotattend")).removeClass("span-did-not-attend");//mobio
                                angular.element(document.querySelector("#didnotattendsignature")).addClass("didnotattend-blank");
                            }
                        }
                    }, { escape: false }
                );
            }
            $scope.packetandMeeting();
            $scope.approveFunction = function () {
                var count = 0;
                $scope.checkAllShowForMyTeam = false;
                angular.forEach($scope.mileages, function (item, key) {
                    if (item.totalReimbursements > '0.00' && item.status != 'Approved') {
                        count++;
                    }
                });
                if (count > 0) {
                    $scope.checkAllShowForMyTeam = true;
                }

            }
            $scope.myTeamCheckUncheckAll = function () {
                if ($scope.IsAllChecked == true)
                    $scope.displayTeamRecordBtn = true;
                else
                    $scope.displayTeamRecordBtn = false;

                angular.forEach($scope.mileages, function (item) {
                    item.isSelected = $scope.IsAllChecked;
                });
            }

            $scope.CheckUncheckHeader = function (status) {
                var total = $('.approveChkForcurrentyear').length;
                var total1 = $('.approveChkforpriviousyear').length;

                var count = 0;
                angular.forEach($scope.mileages, function (item) {
                    if (item.isSelected) {
                        count++;
                    }
                });
                if (total == count)
                    $scope.IsAllChecked = true;
                else
                    $scope.IsAllChecked = false;

                if (count > 0)
                    $scope.displayTeamRecordBtn = true;
                else
                    $scope.displayTeamRecordBtn = false;


                if (total1 == count)
                    $scope.IsAllChecked = true;
                else
                    $scope.IsAllChecked = false;


            }
            $scope.approveReimbursementsofManager = function () {
                $scope.reimbursements = [];
                for (var i = 0; i < $scope.mileages.length; i++) {
                    if ($scope.mileages[i].isSelected == true) {
                        $scope.reimbursements.push($scope.mileages[i]);
                    }
                }
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.approveReimbursements}', $scope.selectedYear, $scope.id, $scope.accid, JSON.stringify($scope.reimbursements),
                    function (result, event) {
                        if (event.status && result != null) {
                            if (result != '') {
                                $scope.mileages = [];
                                $scope.mileages = JSON.parse(result);
                            }
                            else {
                                $scope.mileages = [];
                            }
                            $scope.approveFunction();
                            //toastr.success('The mileage approval process is running in the background, once completed you will receive an email.');
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
                $scope.$modalInstance = $modal.open({
                    template: '<button type="button" ng-click="cancel()" class="childcls close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{approvalTopMsg}}</h4></div><div class="check-in-info"><p>{{approvalBottomMsg}}</p></div><div class="check-submit"><button type="button" ng-click="ok()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                    scope: $scope
                });
            };
            $scope.timeConversion = function (number) {
                var time;
                var hours = Math.floor(number / 60);
                var min = number % 60;
                hours = hours < 10 ? "0" + hours : hours;
                min = min < 10 ? "0" + min : min;
                time = hours + ':' + min;
                //var time = (hours < 12) ? (hours-12 + ':' + min +' PM') : (hours + ':' + min +' AM');
                return time;
            }
            $scope.openmodal = function (clickedMonth, emailofemployee) {

                $scope.clickedMonth = clickedMonth;
                $scope.nameofEmployee = '{!nameofEmployee}';
                console.log('$scope.nameofEmployee :- ' + $scope.nameofEmployee);
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.AdminManagerDriverDashboardController.getMileages}', $scope.clickedMonth, $scope.selectedYear, $scope.id,
                    function (result, event) {
                        if (event.status && result != null) {
                            /*console.log(result);*/
                            if (result != '') {

                                var mileageList = [];
                                var resultdata = result.replace(/\\/g, '');
                                var mileageList = JSON.parse(resultdata);
                                angular.forEach(mileageList, function (item) {
                                    item.drivingtime = $scope.timeConversion(item.drivingtime);
                                    item.staytime = $scope.timeConversion(item.staytime);
                                    item.totaltime = $scope.timeConversion(item.totaltime);
                                    if (item.lockdate != null) {
                                        item.isLockDate = true;
                                        if (item.status === "Approved") {
                                            item.isSelected = true;

                                        }
                                        else if (item.status === "Rejected") {
                                            item.isChecked = true;
                                        }
                                        else if (item.status === "Not Approved Yet") {
                                            item.isSelected = false;
                                            item.isChecked = false;
                                        }
                                    }
                                    else if (item.lockdate === null) {

                                        item.isLockDate = false;
                                        if (item.status === "Approved") {
                                            item.isSelected = true;
                                        }
                                        else if (item.status === "Rejected") {
                                            item.isChecked = true;

                                        }
                                        else if (item.status === "Not Approved Yet") {
                                            item.isSelected = false;
                                            item.isChecked = false;

                                        }
                                    }
                                });
                                $scope.exportReimList = [];
                                $scope.exportReimList.push(["Contact Email", "Tracking Style", "Day Of Week", "Trip Date", "Start Time", "End Time", "Trip Origin", "Trip Destination", "Mileage", "Status", "Date Submitted", "Date Approved", "Maint/Tires", "Fuel Rate", "Variable Rate", "Variable Amount", "Drive Time", "Stay Time", "Total Time", "Notes", "Tags"]);
                                angular.forEach(mileageList, function (item, key) {
                                    $scope.exportReimList.push([item.emailaddress, item.tracingstyle, item.dayofweek, item.tripdate, item.starttime, item.endtime, item.origin, item.destination, item.mileage, item.status, item.submitteddate, item.approveddate, item.maintTyre, item.fuelRate, item.variablerate, item.variableamount, item.drivingtime, item.staytime, item.totaltime, item.notes, item.tag]);
                                });
                                // $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style","Status","Date Submitted","Date Approved","Maint/Tires","Fuel Rate","Variable Rate","Variable Amount","Notes"]);
                                // angular.forEach(mileageList, function (item, key) {
                                //     $scope.exportReimList.push([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle,item.status,item.submitteddate,item.approveddate,item.maintTyre,item.fuelRate,item.variablerate,item.variableamount,item.notes]);
                                // });
                                $scope.fileName = $scope.adminname + '\'s Mileages ' + $scope.FromDate;
                                $scope.reimbursementDialog.open($scope.nameofEmployee, $scope.fileName, clickedMonth, mileageList, $scope.emailofemployee);
                            } else {
                                var mileageList = [];
                                $scope.exportReimList = [];
                                $scope.exportReimList.push(["Contact Email", "Tracking Style", "Day Of Week", "Trip Date", "Start Time", "End Time", "Trip Origin", "Trip Destination", "Mileage", "Status", "Date Submitted", "Date Approved", "Maint/Tires", "Fuel Rate", "Variable Rate", "Variable Amount", "Drive Time", "Stay Time", "Total Time", "Notes", "Tags"]);
                                angular.forEach(mileageList, function (item, key) {
                                    $scope.exportReimList.push([item.emailaddress, item.tracingstyle, item.dayofweek, item.tripdate, item.starttime, item.endtime, item.origin, item.destination, item.mileage, item.status, item.submitteddate, item.approveddate, item.approveddate, item.approveddate, item.variableamount, item.variableamount, item.drivingtime, item.staytime, item.totaltime, item.notes, item.tag]);
                                });
                                // $scope.exportReimList.push(["Contact Email", "Day Of Week","Trip Date","Start Time","End Time","Trip Origin","Trip Destination","Mileage","Tracing Style","Status","Date Submitted","Date Approved","Maint/Tires","Fuel Rate","Variable Rate","Variable Amount","Notes"]);
                                // angular.forEach(mileageList, function (item, key) {
                                //     $scope.exportReimList.poneush([item.emailaddress, item.dayofweek,item.tripdate,item.starttime,item.endtime,item.origin,item.destination,item.mileage,item.tracingstyle,item.status,item.submitteddate,item.approveddate,item.maintTyre,item.fuelRate,item.variablerate,item.variableamount,item.notes]);
                                // });
                                $scope.fileName = $scope.adminname + '\'s Mileages ' + $scope.FromDate;
                                $scope.reimbursementDialog.open($scope.nameofEmployee, $scope.fileName, clickedMonth, mileageList, $scope.emailofemployee);
                            }

                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                    },
                    { escape: false }
                );
            };

            $scope.empContact = {!obj_current_contact_details};
            $scope.adminname = $scope.empContact[0].Name;
            $scope.driverType = $scope.empContact[0].Driver_Type__c;
            $scope.empReimList = JSON.parse('{!ReimbursementsList}');
            $scope.mileageList = '';
            $scope.gaspricedata = {!gaspriceforpreviosmonth};
            /*$scope.fuelprice = JSON.stringify($scope.gaspricedata[0].Fuel_Price__c);*/
            if ($scope.gaspricedata != null && $scope.gaspricedata != '') {
                if ($scope.gaspricedata[0].Fuel_Price__c != '' && $scope.gaspricedata[0].Fuel_Price__c != null) {
                    $scope.fuelprice = JSON.stringify($scope.gaspricedata[0].Fuel_Price__c);
                } else {
                    $scope.fuelprice = '';
                }
            } else {
                $scope.fuelprice = '';
            }
            $scope.showunapprove = false;
            if ($scope.empReimList == 0) {
                $scope.unapprovemileage = JSON.stringify($scope.empReimList);
                $scope.showunapprove = true;
            }
            else {
                var count = 0;
                angular.forEach($scope.empReimList, function (item, key) {
                    count = count + item.Total_Pending__c;
                });
                $scope.unapprovemileage = count;
                $scope.showunapprove = true;
            }
            /* Sorting For table */
            $scope.sortKey1 = 'Month';   //set the sortKey to the param passed   
            $scope.reverse1 = false;
            $scope.sort1 = function (keyname) {
                //set the sortKey to the param passed
                $scope.reverse1 = ($scope.sortKey1 === keyname) ? !$scope.reverse1 : false;//if true make it false 
                $scope.sortKey1 = keyname;
            }
            $scope.selectedYear = '';
            $scope.fetchMileage = function (clickedyear) {
                $('#spinner').show();
                $scope.selectedYear = clickedyear;
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getAllReimbursements}', $scope.selectedYear, $scope.id, $scope.accid,
                    function (result, event) {
                        if (event.status && result != null) {
                            if (result != '') {
                                $scope.mileages = [];
                                $scope.mileages = JSON.parse(result);
                                $scope.resultMonth = [];

                                angular.forEach($scope.mileages, function (o) {
                                    if (o.month) {
                                        $scope.resultMonth.push(o.month);
                                        // $scope.syncHeader = true;
                                    }
                                });
                                var monthCheck = $scope.resultMonth.includes($scope.syncMonth);
                                if ($scope.lastYear === $scope.selectedYear) {
                                    if (monthCheck) {
                                        $scope.syncHeader = true;
                                    } else {
                                        $scope.syncHeader = false;
                                    }
                                }
                            }
                            else {
                                $scope.mileages = [];
                            }
                            $('#spinner').hide();
                            $scope.approveFunction();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong.');
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }

            // excel download
            $scope.downloadToExcel = function (sheetData, excelfile) {

                function datenum(v, date1904) {
                    if (date1904) v += 1462;
                    var epoch = Date.parse(v);
                    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                };

                function getSheet(sheetData, opts) {
                    var ws = {};
                    var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
                    for (var R = 0; R != sheetData.length; ++R) {
                        for (var C = 0; C != sheetData[R].length; ++C) {
                            if (range.s.r > R) range.s.r = R;
                            if (range.s.c > C) range.s.c = C;
                            if (range.e.r < R) range.e.r = R;
                            if (range.e.c < C) range.e.c = C;
                            var cell = { v: sheetData[R][C] };
                            if (cell.v == null) continue;
                            var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });

                            if (typeof cell.v === 'number') cell.t = 'n';
                            else if (typeof cell.v === 'boolean') cell.t = 'b';
                            else if (cell.v instanceof Date) {
                                cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                cell.v = datenum(cell.v);
                            }
                            else cell.t = 's';
                            ws[cell_ref] = cell;
                        }
                    }
                    if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                    return ws;
                };

                function Workbook() {
                    if (!(this instanceof Workbook)) return new Workbook();
                    this.SheetNames = [];
                    this.Sheets = {};
                }
                var wb = new Workbook(), ws = getSheet(sheetData);
                /* add worksheet to workbook */
                wb.SheetNames.push(excelfile);
                wb.Sheets[excelfile] = ws;
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                function s2ab(s) {
                    var buf = new ArrayBuffer(s.length);
                    var view = new Uint8Array(buf);
                    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                    return buf;
                }
                saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), excelfile + '.xlsx');
            };
            // Time and Attendence Report
            // $scope.fetchTimeAttendence = function (clickedyear) {
            //     $('#spinner').show();
            //     $scope.timeAttendence = [];
            //     $scope.selectedYear = clickedyear;
            //     Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.TimeAttendance}', $scope.id, $scope.selectedYear,
            //         function (result, event) {
            //             if (event.status && result != null) {
            //                 $scope.timeAttendence = result;
            //                 console.log($scope.timeAttendence);
            //                 $('#spinner').hide();
            //             }
            //             else {
            //                 $('#spinner').hide();
            //             }
            //             $scope.$apply();
            //         },
            //         { escape: false }
            //     );

            // }

            // Reimbursement Link 
            $scope.fetchReimbMileage = function (clickedyear) {
                $('#spinner').show();
                $scope.reimbMileages = [];
                $scope.selectedYear = clickedyear;
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getAllReimbursements}', $scope.selectedYear, $scope.id, $scope.accid,
                    function (result, event) {
                        if (event.status && result != null) {
                            if (result != '') {
                                $scope.reimbMileages = [];
                                $scope.reimbMileages = JSON.parse(result);
                                console.log($scope.reimbMileages);
                            }
                            else {
                                $scope.reimbMileages = [];
                            }
                            $('#spinner').hide();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }

            // download time and attendance detail report or reimbursement report
            // $scope.downloadReport = function (startDt, endDt) {
            //     $scope.timePeriodList = [];
            //     $scope.empObj = {!obj_current_contact_details};

            // $scope.driverName = $scope.empObj[0].Name;
            // $scope.TDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
            // $scope.excelFileName = $scope.driverName + '\'s Time And Attendance Report ' + $scope.TDate;
            // Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getMileagesBasedTandAtt}', startDt, endDt, $scope.id,
            //     function (result, event) {
            //         if (event.status && result != null) {
            //             if (result != '') {
            //             var detailedList = JSON.parse(result);
            //             $scope.exportPeriodList = [];

            //             $scope.exportPeriodList.push(["Contact Email", "Tracking Style", "Day Of Week", "Trip Date", "Start Time", "End Time", "Trip Origin", "Trip Destination", "Mileage", "Status", "Date Submitted", "Date Approved", "Maint/Tires", "Fuel Rate", "Variable Rate", "Variable Amount", "Drive Time", "Stay Time", "Total Time", "Notes", "Tags"]);
            //             angular.forEach(detailedList, function (item, key) {
            //                 $scope.exportPeriodList.push([item.emailaddress, item.tracingstyle, item.dayofweek, item.tripdate, item.starttime, item.endtime, item.origin, item.destination, item.mileage, item.status, item.submitteddate, item.approveddate, item.maintTyre, item.fuelRate, item.variablerate, item.variableamount, item.drivingtime, item.staytime, item.totaltime, item.notes, item.tag]);
            //             });

            //             $scope.downloadToExcel($scope.exportPeriodList, $scope.excelFileName);
            //         }else{
            //             $scope.exportPeriodList = [];
            //             $scope.downloadToExcel($scope.exportPeriodList, $scope.excelFileName);
            //         }
            //         $scope.$apply();
            //      }
            //     },
            //     { escape: false }
            // );
            // }

            $scope.downloadReimbReport = function (reimonth) {
                $scope.exportReimbusList = [];
                $scope.empObj = {!obj_current_contact_details
            };
            $scope.driverName = $scope.empObj[0].Name;
            $scope.TDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
            $scope.excelFileName = $scope.driverName + '\'s Reimbursement Report ' + $scope.TDate;
            $scope.exportReimbusList.push(["Contact Email", "Contact Driver Type", "Month", "Mileage", "Status", "Date Approved", "Maint/Tires", "Fuel Rate", "Mi Rate", "Variable Amount", "Fixed 1", "Fixed 2", "Fixed 3", "Total Reimbursement"]);
            angular.forEach($scope.reimbMileages, function (item, key) {
                if (item.month === reimonth) {
                    $scope.exportReimbusList.push([item.contactEmail, item.contactdrivertype, item.month, item.mileage, item.status, item.approveddate, item.maintainsAndTyres, item.fuel, item.variableRate, item.varibleAmount, item.fixed1, item.fixed2, item.fixed3, item.totalFixedAmount]);
                }
            });

            $scope.downloadToExcel($scope.exportReimbusList, $scope.excelFileName);
            console.log($scope.reimbMileages);
            }

            $scope.syncMileages = function (month, fuel, maintainsAndTyres, empReID, mpg) {
                $('#processSpinner').show();
                document.getElementById('messageContainer').classList.add('left-style');
                document.getElementById('processMessage').innerHTML = 'Reimbursement status is updating to pending and deleting unapprove mileages.'
                $scope.getMonth = month;
                $scope.getYear = $scope.selectedYear;
                $scope.getFuel = fuel;
                $scope.getmaintTyre = maintainsAndTyres;
                $scope.empReID = empReID;
                $scope.mpg = mpg;
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.UpdateReimbursementStatus}', $scope.empReID,
                    function (result, event) {
                        if (event.status) {
                            document.getElementById('messageContainer').classList.remove('left-style');
                            document.getElementById('processMessage').innerHTML = 'Syncing unapprove mileages..'
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.TripCallout}', $scope.id, $scope.getMonth, $scope.getYear, $scope.getFuel, $scope.getmaintTyre, $scope.empReID, $scope.mpg, 'U',
                                function (result, event) {
                                    if (event.status) {
                                        document.getElementById('processMessage').innerHTML = 'Syncing submitted mileages...'
                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.TripCallout}', $scope.id, $scope.getMonth, $scope.getYear, $scope.getFuel, $scope.getmaintTyre, $scope.empReID, $scope.mpg, 'S',
                                            function (result, event) {
                                                if (event.status) {
                                                    $scope.$modalInstance = $modal.open({
                                                        template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{syncMileageLabel}}</h4></div><div class="check-in-info"><p></p></div><div class="check-submit"><button type="button" ng-click="okforSync()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',

                                                        scope: $scope
                                                    });
                                                    $('#processSpinner').hide();
                                                }
                                                else {
                                                    toastr.error('Something went wrong');
                                                }
                                            }, { escape: false }
                                        );
                                    }
                                    else {
                                        toastr.error('Something went wrong');
                                    }
                                }
                            );
                        }
                        else {
                            toastr.error('Something went wrong');
                        }
                    }, { escape: false }
                );
            }


            $scope.okforSync = function () {
                $scope.$modalInstance.close();
                location.reload();
            }
            $scope.sortKey = 'intmonth';    //set the sortKey to the param passed   
            $scope.reverse = true;
            $scope.sort = function (keyname) {
                $scope.reverse = ($scope.sortKey === keyname) ? !$scope.reverse : false;
                $scope.sortKey = keyname;
            }

            $scope.sortKey1 = 'intmonth';   //set the sortKey to the param passed   
            $scope.reverse1 = true;
            $scope.sort1 = function (keyname) {
                $scope.reverse1 = ($scope.sortKey1 === keyname) ? !$scope.reverse1 : false;
                $scope.sortKey1 = keyname;
            }

            $scope.fetchEmpReimList = function (result) {
                $scope.empReimList = result;
                $scope.unapprovemileage = 0;
                if ($scope.empReimList == 0) {
                    $scope.showunapprove = false;
                    $scope.unapprovemileage = 0;
                    $scope.showunapprove = true;

                }
                else {
                    var count = 0;
                    $scope.showunapprove = false;
                    angular.forEach($scope.empReimList, function (item, key) {
                        count = count + item.Total_Pending__c;
                    });
                    $scope.unapprovemileage = count;
                    $scope.showunapprove = true;
                }
            }

            $scope.refreshpage = function (updatedmileagelist) {
                $scope.mileages = [];
                /*console.log('Year:-'+$scope.selectedYear);*/
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getAllReimbursements}', $scope.selectedYear, $scope.id, $scope.accid,
                    function (result, event) {
                        if (event.status && result != null) {
                            if (result != '') {
                                $scope.mileages = [];
                                $scope.mileages = JSON.parse(result);
                            }
                            else {
                                $scope.mileages = [];
                            }
                            $('#spinner').hide();
                            $scope.approveFunction();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
                $scope.exportReimList = []

                $scope.exportReimList.push(["Trip Date", "Origin", "Description", "Submitted", "Approved Date", "Mileage", "Variable Amount"]);
                angular.forEach(updatedmileagelist, function (item, key) {
                    $scope.exportReimList.push([item.tripdate, item.origin, item.destination, item.submitteddate, item.approveddate, item.mileage, item.variableamount]);
                });
            }

            $scope.modalshowforapproved = function (status) {

                $('#spinner').hide();
                $scope.flagstatus;
                if (status == 'Approved')
                    $scope.flagstatus = 'Approved';
                if (status == 'Rejected')
                    $scope.flagstatus = 'Rejected';
                if (status == 'ApprovedRejected')
                    $scope.flagstatus = 'Approved and Rejected';
                $scope.flagstatus

                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getReimbursementsListClone}', $scope.id,
                    function (result, event) {
                        if (event.status && result != null) {
                            var rs = JSON.parse(result);
                            $scope.fetchEmpReimList(rs);
                        }
                    }, { escape: false }
                );

                $scope.$modalInstance = $modal.open({
                    template: '<button type="button" ng-click="cancel()" class="childcls close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{approvalTopMsg}}</h4></div><div class="check-in-info"><p>{{approvalBottomMsg}}</p></div><div class="check-submit"><button type="button" ng-click="ok()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                    scope: $scope
                });
            }
            $scope.ok = function () {
                $scope.$modalInstance.close();
            };
            $scope.cancel = function () {
                $scope.$modalInstance.dismiss('cancel');
            };

            $scope.complianceCalculation = function () {
                $('#spinner').show();
                $scope.detailreportfordownload = [];
                $scope.summaryreportfordownload = [];
                $scope.filenamefordetail = $scope.adminname + ' Annual Tax Liability Detail Report';
                $scope.fileNameforsummary = $scope.adminname + ' Annual Tax Liability Summary Report';

                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminManagerDriverDashboardController.getCompliance}', $scope.id,
                    function (result, event) {
                        if (event.status && result != null) {
                            /*console.log(JSON.stringify(result));*/
                            $scope.dummyname = JSON.parse(result[0]);
                            $scope.messageofcompliance = JSON.parse(result[1]);
                            console.log($scope.messageofcompliance);
                            if (result.length > 2) {
                                /*console.log('result name :- '+$scope.dummyname);*/
                                $scope.$apply(function () {
                                    $scope.compliancedata = JSON.parse(result[2]);
                                    $scope.detailreport = JSON.parse(result[3]);
                                    $scope.summaryreport = JSON.parse(result[4]);
                                    $scope.Reimbursements = JSON.parse(result[5]);
                                    $scope.maxallow = JSON.parse(result[6]);
                                    $scope.taxliablity = JSON.parse(result[7]);
                                });

                                $scope.detailreportfordownload.push(["Driver Name","Email", "Employee Id", "Month", "Year", "Total Reimbursement", "IRS allowable", "Imputed Income"]);
                                angular.forEach($scope.detailreport, function (item) {
                                    $scope.detailreportfordownload.push([ item.drivername, item.emailid, item.employeeid, item.month,  item.year,  "$" + item.totalreim, "$" + item.iRSallowable, "$" + item.imputedincome]);

                                });

                                $scope.detailreportfordownload.push([" ", " ", " ", " ", " ", "$" + $scope.Reimbursements, "$" + $scope.maxallow, "$" + $scope.taxliablity]);

                                $scope.summaryreportfordownload.push(["Driver Name",  "Email", "Employee Id", "Total Reimbursement", "IRS allowable", "Imputed Income"]);
                                angular.forEach($scope.summaryreport, function (item) {
                                    $scope.summaryreportfordownload.push([item.drivername, item.emailid, item.employeeid,  "$" + $scope.Reimbursements, "$" + $scope.maxallow, "$" + item.imputedincome]);
                                });
                                $scope.$apply(function () {
                                    $scope.summrylenth = $scope.summaryreportfordownload.length
                                });
                                $('#spinner').hide();
                            }
                            else {
                                /*console.log('lenth');*/
                                $scope.$apply(function () {
                                    $scope.compliancedata = [];
                                    $scope.summrylenth = 0;
                                });
                                $('#spinner').hide();
                            }
                        }
                    },
                    { escape: false }
                );
            }
                }]);    
        </script>
    </head>

    <body ng-app="managerDashboardModule" ng-controller="managerDashboardController">
        <div class="align-items-center justify-content-center" id="processSpinner">
            <div class="spinner-background" style="opacity:0.8"></div>
            <div class="spinner-load">
                <div class="spinner-border text-success" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="sMessage-load text-white" id="messageContainer">
                <div id="processMessage"></div>
            </div>
        </div>
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" href="/app/managerdashboardfromadmin?managerid={{manid}}&accid={{accid}}&id={{adminid}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon">
                                        <i class="fa fa-bars"></i>
                                    </span>
                                </button>
                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">
                                    <ul class="navbar-nav flex-row">
                                        <li class="nav-item active">
                                            <a class="nav-link text-white" href="/app/managerdashboardfromadmin?managerid={{manid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Dashboard</a>
                                        </li>
                                        <!-- <li class="nav-item">
                                                <a class="nav-link text-white" href="/app/MileageDashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Mileage</a>
                                            </li> -->
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/roster?accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Drivers</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/reportlist?accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Reports</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <section class="container-fluid" ng-cloak="true">
            <div class="back-btn my-3">
                <a href="/app/managerdashboardfromadmin?managerid={{manid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}">
                    <i class="fas fa-chevron-left"></i> Back</a>
            </div>
            <c:EmployeeDetails />
            <div class="form-gray-divider"></div>
            <div class="my-5 admin-roster-tab-section">
                <ul class="nav nav-pills">
                    <li class="nav-item mb-3">
                        <a class="nav-link active" data-toggle="pill" href="#pills-admin-dashbord-myteam">My Trips</a>
                    </li>
                    <li class="nav-item mb-3">
                        <a class="nav-link" data-toggle="pill" href="#pills-admin-dashbord-mileage">Plan Info</a>
                    </li>
                </ul>
                <div class="tab-content timeline">
                    <div class="tab-pane active" id="pills-admin-dashbord-myteam">
                        <div id="accordion" role="tablist">
                            <div class="card insurance-declatarion-card" ng-repeat="yr in years">
                                <div class="card-header" role="tab" id="Cardheading">
                                    <h5 class="mb-0">
                                        <a class="collapsed" data-toggle="collapse" href="#collapseCard{{$index}}" aria-expanded="false" aria-controls="collapseCard"
                                            ng-click="fetchMileage(yr)">
                                            {{yr}}
                                        </a>
                                    </h5>
                                    <!-- <h5 class="mb-0 ml-5" ng-if="accid === ERMIAcc && driverType != 'Driver - Salary' ">
                                        <a class="collapsed" data-toggle="collapse" href="#collapseTimeCard{{$index}}" aria-expanded="false" aria-controls="collapseTimeCard"
                                            ng-click="fetchTimeAttendence(yr)">
                                            T &amp; A
                                        </a>
                                    </h5>
                                    <h5 class="mb-0 ml-5" ng-if="accid === ERMIAcc && driverType != 'Driver - Salary' ">
                                        <a class="collapsed" data-toggle="collapse" href="#collapseReimbCard{{$index}}" aria-expanded="false" aria-controls="collapseReimbCard"
                                            ng-click="fetchReimbMileage(yr)">
                                            Reimbursement
                                        </a>
                                    </h5> -->
                                </div>
                                <div id="collapseCard{{$index}}" class="collapse" role="tabpanel" aria-labelledby="Cardheading" data-parent="#accordion">
                                    <div class="card-body pad-0">
                                        <div class="table-responsive">
                                            <table id="driver-dashbord" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0" width="100%">
                                                <thead>
                                                    <tr>
                                                        <th ng-if="yr == lastYear" ng-show="syncHeader">Sync</th>
                                                        <th>Month
                                                            <span class="sort-icon pull-right"></span>
                                                        </th>
                                                        <th>Fuel
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='Fuel'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>Mileage
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='mileage'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>Fixed + Variable
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='Reimbursements'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Total Reimbursement
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='totalReimbursements'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>
                                                            <!--  ng-click="sort('status')" -->
                                                            <button class="btn btn-primary pull-right1">Approve
                                                                <!--  <input ng-show="checkAllShowForMyTeam" type="checkbox" ng-model="IsAllChecked" ng-click="myTeamCheckUncheckAll()" />  -->
                                                            </button>
                                                            <!-- <span class="sort-icon pull-right" ng-show="sortKey=='status'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span> -->
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody class="driver-dashboard-table table-a-link">
                                                    <tr dir-paginate="ml in mileages |orderBy:sortKey:reverse |itemsPerPage:12">
                                                        <td class="w-10rem" ng-if="yr == lastYear" ng-show="syncHeader">
                                                            <button class="btn btn-primary syncMileageBtn" ng-click="syncMileages(ml.month,ml.fuel,ml.maintainsAndTyres,ml.employeeReimbursementId,ml.mpg)"
                                                                ng-if="ml.month == syncMonth">Mileage</button>
                                                        </td>
                                                        <td ng-click="openmodal(ml.month)">
                                                            <a>{{ml.month}}</a>
                                                        </td>
                                                        <td ng-if="ml.fuel != null && ml.fuel != ''">${{ml.fuel}}</td>
                                                        <td ng-if="ml.fuel == null || ml.fuel == ''"></td>
                                                        <td>{{ml.mileage | currency:value=""}}</td>
                                                        <td>{{ml.varibleAndFixedReimbursements}}</td>
                                                        <td>${{ml.totalReimbursements}}</td>
                                                        <td>
                                                            <div class="pull-right1" ng-model="ml.status" ng-if="ml.status=='Approved' && ml.mileage > '0.00'"> {{ml.status}} on {{ml.approveddate}}
                                                            </div>
                                                            <div ng-model="ml.status" ng-if="ml.status=='Rejected' "> {{ml.status}} on {{ml.approveddate}}
                                                            </div>
                                                            <div class="pull-right1 mr-11 margin_top-5" ng-if="ml.status !='Approved' && ml.mileage > '0.00'">
                                                                <input type="checkbox" ng-model="ml.isSelected" ng-change="CheckUncheckHeader()" class="approveChkForcurrentyear" />
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                            <button class="btn btn-secondary float-right" ng-show="displayTeamRecordBtn" ng-click="approveReimbursementsofManager();">Submit</button>
                                            <!-- <dir-pagination-controls max-size="5" direction-links="true" boundary-links="true" autoHide="true" responsive="true" class="pull-right"></dir-pagination-controls> -->
                                        </div>
                                    </div>
                                </div>
                                <!-- <div ng-if="accid === ERMIAcc && driverType != 'Driver - Salary' " id="collapseTimeCard{{$index}}" class="collapse" role="tabpanel" aria-labelledby="Cardheading"
                                    data-parent="#accordion">
                                    <div class="card-body pad-0">
                                        <div class="table-responsive">
                                            <table id="driver-dashbord" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0" width="100%">
                                                <thead>
                                                    <tr>
                                                        <th>Start Date
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='startDate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>End Date
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='endDate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>Drive Time
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='driveTime'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>Stay Time
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='stayTime'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Total Time
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='totalTime'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th></th>
                                                    </tr>
                                                </thead>
                                                <tbody class="driver-dashboard-table table-a-link">
                                                    <tr dir-paginate="time in timeAttendence |orderBy:sortKey:reverse |itemsPerPage:12">
                                                        <td>{{time.startDate}}</td>
                                                        <td>{{time.endDate}}</td>
                                                        <td>{{time.totaldrivingTime}}</td>
                                                        <td>{{time.totalStayTime}}</td>
                                                        <td>{{time.totalTime}}</td>
                                                        <td class="vw-4">
                                                            <button class="btn btn-primary font-14 mr-11 cursor-type" ng-click="downloadReport(time.startDate,time.endDate)">Download
                                                                <i class="fa fa-download"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr ng-if="timeAttendence.length == 0">
                                                        <td colspan="5" class="table-nodata">No Data Available</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>

                                    </div>
                                </div>
                                <div ng-if="accid === ERMIAcc && driverType != 'Driver - Salary' " id="collapseReimbCard{{$index}}" class="collapse" role="tabpanel" aria-labelledby="Cardheading"
                                    data-parent="#accordion">
                                    <div class="card-body pad-0">
                                        <div class="table-responsive">
                                            <table id="driver-dashbord" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0" width="100%">
                                                <thead>
                                                    <tr>
                                                        <th>Month
                                                            <span class="sort-icon pull-right"></span>
                                                        </th>
                                                        <th>Fuel
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='Fuel'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>Mileage
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='mileage'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th>Mi Rate
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='variableRate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Variable
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='varibleAmount'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Fixed 1
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='fixed1'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Fixed 2
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='fixed2'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Fixed 3
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='fixed3'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                            </span>
                                                        </th>
                                                        <th>Total Reimbursement
                                                            <span class="sort-icon pull-right" ng-show="sortKey=='totalFixedAmount'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                                        </th>
                                                        <th></th>
                                                    </tr>
                                                </thead>
                                                <tbody class="driver-dashboard-table table-a-link">
                                                    <tr dir-paginate="reimbml in reimbMileages |orderBy:sortKey:reverse |itemsPerPage:12">
                                                        <td>{{reimbml.month}}</td>
                                                        <td ng-if="reimbml.fuel != null && reimbml.fuel != ''" >${{reimbml.fuel}}</td>
                                                        <td ng-if="reimbml.fuel == null || reimbml.fuel == ''" ></td>
                                                        <td>{{reimbml.mileage | currency:value=""}}</td>
                                                        <td>{{reimbml.variableRate}}</td>
                                                        <td>{{reimbml.varibleAmount}}</td>
                                                        <td ng-if="reimbml.fixed1 != 'null' && reimbml.fixed1 != ''">{{reimbml.fixed1}}</td>
                                                        <td ng-if="reimbml.fixed1 == 'null' || reimbml.fixed1 == ''"></td>
                                                        <td ng-if="reimbml.fixed2 != 'null' && reimbml.fixed2 != ''">{{reimbml.fixed2}}</td>
                                                        <td ng-if="reimbml.fixed2 == 'null' || reimbml.fixed2 == ''"></td>
                                                        <td ng-if="reimbml.fixed3 != 'null' && reimbml.fixed3 != ''">{{reimbml.fixed3}}</td>
                                                        <td ng-if="reimbml.fixed3 == 'null' || reimbml.fixed3 == ''"></td>
                                                        <td ng-if="reimbml.totalFixedAmount != 'null' && reimbml.totalFixedAmount != ''" class="vw-8">{{reimbml.totalFixedAmount}}</td>
                                                        <td ng-if="reimbml.totalFixedAmount == 'null' || reimbml.totalFixedAmount == ''" class="vw-8"></td>
                                                        <td class="vw-4">
                                                            <button class="btn btn-primary font-14 mr-11 cursor-type" ng-click="downloadReimbReport(reimbml.month)">Download
                                                                <i class="fa fa-download"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                    <tr ng-if="reimbMileages.length == 0">
                                                        <td colspan="9" class="table-nodata">No Data Available</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>

                                    </div>
                                </div> -->
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="pills-admin-dashbord-mileage">
                        <c:PlanInfoComponent driverPacketDocCount="{!obj_driverpacket_attachementsize}" insuranceDocCount="{!obj_attachementsize}"
                            mvrCheckDocCount="{!obj_driverpacket_attachMVRsize}" driverPacketId="{!If(obj_driverpacket_attachementsize > 0, obj_driver_driverpacket[0], null)}"
                            insuranceId="{!If(obj_attachementsize > 0, obj_driver_insurance[0], null)}" mvrCheckId="{!If(obj_driverpacket_attachMVRsize > 0, obj_driver_driverMVR[0], null)}"
                        />
                    </div>
                </div>
            </div>
        </section>
        <reimbursements-dialog-directive model="reimbursementDialog" modal-Open="modalshowforapproved(status)" callback-Fn="refreshpage(updatedmileagelist)"
            export-data="exportReimList"></reimbursements-dialog-directive>
        <!--  <reimbursements-dialog-directive model="reimbursementDialog" export-data="exportReimList"></reimbursements-dialog-directive> -->
        <apex:include pageName="EMC_Common_footer" />
    </body>

    </html>
</apex:page>